$(document).ready(function(){var e=$(".scrolling-text");if(0!==e.length){var t=e.find(".scrolling-frame"),n=e.height(),i=0,r=t.find("span").length;setTimeout(function(){setInterval(function(){i++,i==r&&(t.velocity({translateY:"0"},0),i=1),t.velocity({translateY:"-="+n},{duration:1e3,easing:"ease"})},4e3)},0)}
(function(){var scene,camera,renderer,composer,box,pointLight,occlusionComposer,occlusionRenderTarget,occlusionBox,lightSphere,volumetericLightShaderUniforms,DEFAULT_LAYER=0,OCCLUSION_LAYER=1,renderScale=0.5,angle=0,sphere_mesh,mesh;scene=new THREE.Scene();camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000);renderer=new THREE.WebGLRenderer({antialias:false,alpha:true});renderer.setPixelRatio(window.devicePixelRatio);renderer.setSize(window.innerWidth,window.innerHeight);document.getElementById("sec_one").appendChild(renderer.domElement);var orbit=new THREE.OrbitControls(camera,renderer.domElement);orbit.enableZoom=false;function setupScene(){var ambientLight,geometry,material;ambientLight=new THREE.AmbientLight(0x000000);scene.add(ambientLight);pointLight=new THREE.PointLight(0x000000);scene.add(pointLight);geometry=new THREE.SphereBufferGeometry(.1,.1,.1);material=new THREE.MeshBasicMaterial({color:0xee0000});lightSphere=new THREE.Mesh(geometry,material);lightSphere.layers.set(OCCLUSION_LAYER);scene.add(lightSphere);camera.position.z=6;}function addFragmentedSphere(){var geometry=new THREE.DodecahedronGeometry(2.9,0);var material=new THREE.MeshPhongMaterial({color:0x000000,specular:0xffffff,shininess:1,shading:THREE.FlatShading,polygonOffset:true,polygonOffsetFactor:1,wireframe:true});mesh=new THREE.Mesh(geometry,material);var sphere_material=[new THREE.MeshLambertMaterial({color:0xffff00,side:THREE.DoubleSide}),new THREE.MeshBasicMaterial({transparent:true,opacity:0})];var sphere_geometry=new THREE.OctahedronGeometry(2.2,5);for(var i=0;i<sphere_geometry.faces.length;i++){sphere_geometry.faces[i].materialIndex=(i%2==0)?1:0;}sphere_geometry.sortFacesByMaterialIndex();sphere_mesh=new THREE.Mesh(sphere_geometry,sphere_material);sphere_mesh.position.set(0,0,0)
scene.add(sphere_mesh);sphere_mesh.layers.set(OCCLUSION_LAYER);}function setupPostprocessing(){var pass;occlusionRenderTarget=new THREE.WebGLRenderTarget(window.innerWidth*renderScale,window.innerHeight*renderScale);occlusionComposer=new THREE.EffectComposer(renderer,occlusionRenderTarget);occlusionComposer.addPass(new THREE.RenderPass(scene,camera));pass=new THREE.ShaderPass(THREE.VolumetericLightShader);pass.needsSwap=false;occlusionComposer.addPass(pass);volumetericLightShaderUniforms=pass.uniforms;volumetericLightShaderUniforms.exposure.value=0.7;volumetericLightShaderUniforms.decay.value=0.94;volumetericLightShaderUniforms.density.value=0.95;volumetericLightShaderUniforms.weight.value=0.07;volumetericLightShaderUniforms.samples.value=100;composer=new THREE.EffectComposer(renderer);composer.addPass(new THREE.RenderPass(scene,camera));pass=new THREE.ShaderPass(THREE.AdditiveBlendingShader);pass.uniforms.tAdd.value=occlusionRenderTarget.texture;composer.addPass(pass);pass.renderToScreen=true;}function onFrame(){requestAnimationFrame(onFrame);update();render();}function update(){sphere_mesh.rotation.x+=0.001;sphere_mesh.rotation.y+=0.001;}function render(){camera.layers.set(OCCLUSION_LAYER);renderer.setClearColor(0x000000,0);occlusionComposer.render();camera.layers.set(DEFAULT_LAYER);renderer.setClearColor(0xffffff,0);composer.render();}function addRenderTargetImage(){var material,mesh,folder;material=new THREE.ShaderMaterial(THREE.PassThroughShader);material.uniforms.tDiffuse.value=occlusionRenderTarget.texture;mesh=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),material);composer.passes[1].scene.add(mesh);mesh.visible=false;}window.addEventListener('resize',function(){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);var pixelRatio=renderer.getPixelRatio(),newWidth=Math.floor(window.innerWidth/pixelRatio)||1,newHeight=Math.floor(window.innerHeight/pixelRatio)||1;composer.setSize(newWidth,newHeight);occlusionComposer.setSize(newWidth*renderScale,newHeight*renderScale);},false);setupScene();setupPostprocessing();addFragmentedSphere();addRenderTargetImage();onFrame();}())
});